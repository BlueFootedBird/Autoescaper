/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HighlightEscapePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HighlightEscapePlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("HighlightEscapePlugin: Plugin loaded");
    this.addCommand({
      id: "escape-html-characters",
      name: "Escape HTML characters",
      editorCheckCallback: (editor) => {
        this.escapeHighlightedText(editor);
      }
    });
  }
  // Function to escape HTML characters
  escapeHighlightedText(editor) {
    const selectedText = editor.getSelection();
    if (selectedText.length > 0) {
      const escapedText = this.escapeHTML(selectedText);
      editor.replaceSelection(escapedText);
      console.log("No text selected, nothing replaced.");
    } else {
      console.log("No text selected, nothing replaced.");
    }
  }
  // Helper function to escape HTML characters
  escapeHTML(text) {
    const htmlEntities = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    return text.replace(/[&<>"']/g, (char) => htmlEntities[char] || char);
  }
  onunload() {
    console.log("HighlightEscapePlugin: Plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhpZ2hsaWdodEVzY2FwZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnSGlnaGxpZ2h0RXNjYXBlUGx1Z2luOiBQbHVnaW4gbG9hZGVkJyk7XG5cbiAgICAvLyBBZGQgYSBjb21tYW5kIHRvIGVzY2FwZSBoaWdobGlnaHRlZCB0ZXh0LCBubyBkZWZhdWx0IGhvdGtleVxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogJ2VzY2FwZS1odG1sLWNoYXJhY3RlcnMnLFxuICAgICAgbmFtZTogJ0VzY2FwZSBIVE1MIGNoYXJhY3RlcnMnLFxuICAgICAgZWRpdG9yQ2hlY2tDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB7XG4gICAgICAgIHRoaXMuZXNjYXBlSGlnaGxpZ2h0ZWRUZXh0KGVkaXRvcik7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLy8gRnVuY3Rpb24gdG8gZXNjYXBlIEhUTUwgY2hhcmFjdGVyc1xuICBlc2NhcGVIaWdobGlnaHRlZFRleHQoZWRpdG9yOiBFZGl0b3IpIHtcbiAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICAvLyBJZiBubyB0ZXh0IGlzIHNlbGVjdGVkLCB3ZSBkb24ndCBkbyBhbnl0aGluZ1xuICAgIGlmIChzZWxlY3RlZFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXNjYXBlZFRleHQgPSB0aGlzLmVzY2FwZUhUTUwoc2VsZWN0ZWRUZXh0KTtcbiAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGVzY2FwZWRUZXh0KTtcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gdGV4dCBzZWxlY3RlZCwgbm90aGluZyByZXBsYWNlZC5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiTm8gdGV4dCBzZWxlY3RlZCwgbm90aGluZyByZXBsYWNlZC5cIik7XG4gICAgfVxuICB9XG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGVzY2FwZSBIVE1MIGNoYXJhY3RlcnNcbiAgZXNjYXBlSFRNTCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGh0bWxFbnRpdGllczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgICAgICcmJzogJyZhbXA7JyxcbiAgICAgICc8JzogJyZsdDsnLFxuICAgICAgJz4nOiAnJmd0OycsXG4gICAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAgIFwiJ1wiOiAnJiMzOTsnLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9bJjw+XCInXS9nLCAoY2hhcikgPT4gaHRtbEVudGl0aWVzW2NoYXJdIHx8IGNoYXIpO1xuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgY29uc29sZS5sb2coJ0hpZ2hsaWdodEVzY2FwZVBsdWdpbjogUGx1Z2luIHVubG9hZGVkJyk7XG4gIH1cbn1cblxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUErQjtBQUUvQixJQUFxQix3QkFBckIsY0FBbUQsdUJBQU87QUFBQSxFQUN4RCxNQUFNLFNBQVM7QUFDYixZQUFRLElBQUksc0NBQXNDO0FBR2xELFNBQUssV0FBVztBQUFBLE1BQ2QsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04scUJBQXFCLENBQUMsV0FBbUI7QUFDdkMsYUFBSyxzQkFBc0IsTUFBTTtBQUFBLE1BQ25DO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBO0FBQUEsRUFHQSxzQkFBc0IsUUFBZ0I7QUFDcEMsVUFBTSxlQUFlLE9BQU8sYUFBYTtBQUd6QyxRQUFJLGFBQWEsU0FBUyxHQUFHO0FBQzNCLFlBQU0sY0FBYyxLQUFLLFdBQVcsWUFBWTtBQUNoRCxhQUFPLGlCQUFpQixXQUFXO0FBQ25DLGNBQVEsSUFBSSxxQ0FBcUM7QUFBQSxJQUNuRCxPQUFPO0FBQ0wsY0FBUSxJQUFJLHFDQUFxQztBQUFBLElBQ25EO0FBQUEsRUFDRjtBQUFBO0FBQUEsRUFHQSxXQUFXLE1BQXNCO0FBQy9CLFVBQU0sZUFBMEM7QUFBQSxNQUM5QyxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsSUFDUDtBQUVBLFdBQU8sS0FBSyxRQUFRLFlBQVksQ0FBQyxTQUFTLGFBQWEsSUFBSSxLQUFLLElBQUk7QUFBQSxFQUN0RTtBQUFBLEVBRUEsV0FBVztBQUNULFlBQVEsSUFBSSx3Q0FBd0M7QUFBQSxFQUN0RDtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
