/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HighlightEscapePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HighlightEscapePlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("HighlightEscapePlugin: Plugin loaded");
    this.addCommand({
      id: "escape-html-characters",
      name: "Escape HTML Characters",
      editorCallback: (editor) => {
        this.escapeHighlightedText(editor);
      }
    });
  }
  // Function to escape HTML characters
  escapeHighlightedText(editor) {
    const selectedText = editor.getSelection();
    if (selectedText.length > 0) {
      const escapedText = this.escapeHTML(selectedText);
      editor.replaceSelection(escapedText);
      console.log(`Escaped highlighted text: ${escapedText}`);
    } else {
      console.log("No text selected, nothing replaced.");
    }
  }
  // Helper function to escape HTML characters
  escapeHTML(text) {
    const htmlEntities = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    return text.replace(/[&<>"']/g, (char) => htmlEntities[char] || char);
  }
  onunload() {
    console.log("HighlightEscapePlugin: Plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhpZ2hsaWdodEVzY2FwZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnSGlnaGxpZ2h0RXNjYXBlUGx1Z2luOiBQbHVnaW4gbG9hZGVkJyk7XG5cbiAgICAvLyBBZGQgYSBjb21tYW5kIHRvIGVzY2FwZSBoaWdobGlnaHRlZCB0ZXh0LCBubyBkZWZhdWx0IGhvdGtleVxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogJ2VzY2FwZS1odG1sLWNoYXJhY3RlcnMnLFxuICAgICAgbmFtZTogJ0VzY2FwZSBIVE1MIENoYXJhY3RlcnMnLFxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xuICAgICAgICB0aGlzLmVzY2FwZUhpZ2hsaWdodGVkVGV4dChlZGl0b3IpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEZ1bmN0aW9uIHRvIGVzY2FwZSBIVE1MIGNoYXJhY3RlcnNcbiAgZXNjYXBlSGlnaGxpZ2h0ZWRUZXh0KGVkaXRvcjogRWRpdG9yKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuXG4gICAgLy8gSWYgbm8gdGV4dCBpcyBzZWxlY3RlZCwgd2UgZG9uJ3QgZG8gYW55dGhpbmdcbiAgICBpZiAoc2VsZWN0ZWRUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGVzY2FwZWRUZXh0ID0gdGhpcy5lc2NhcGVIVE1MKHNlbGVjdGVkVGV4dCk7XG4gICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihlc2NhcGVkVGV4dCk7XG4gICAgICBjb25zb2xlLmxvZyhgRXNjYXBlZCBoaWdobGlnaHRlZCB0ZXh0OiAke2VzY2FwZWRUZXh0fWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIk5vIHRleHQgc2VsZWN0ZWQsIG5vdGhpbmcgcmVwbGFjZWQuXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBlc2NhcGUgSFRNTCBjaGFyYWN0ZXJzXG4gIGVzY2FwZUhUTUwodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBodG1sRW50aXRpZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgICAnJic6ICcmYW1wOycsXG4gICAgICAnPCc6ICcmbHQ7JyxcbiAgICAgICc+JzogJyZndDsnLFxuICAgICAgJ1wiJzogJyZxdW90OycsXG4gICAgICBcIidcIjogJyYjMzk7JyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRleHQucmVwbGFjZSgvWyY8PlwiJ10vZywgKGNoYXIpID0+IGh0bWxFbnRpdGllc1tjaGFyXSB8fCBjaGFyKTtcbiAgfVxuXG4gIG9udW5sb2FkKCkge1xuICAgIGNvbnNvbGUubG9nKCdIaWdobGlnaHRFc2NhcGVQbHVnaW46IFBsdWdpbiB1bmxvYWRlZCcpO1xuICB9XG59XG5cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0I7QUFFL0IsSUFBcUIsd0JBQXJCLGNBQW1ELHVCQUFPO0FBQUEsRUFDeEQsTUFBTSxTQUFTO0FBQ2IsWUFBUSxJQUFJLHNDQUFzQztBQUdsRCxTQUFLLFdBQVc7QUFBQSxNQUNkLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLGdCQUFnQixDQUFDLFdBQW1CO0FBQ2xDLGFBQUssc0JBQXNCLE1BQU07QUFBQSxNQUNuQztBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFBQTtBQUFBLEVBR0Esc0JBQXNCLFFBQWdCO0FBQ3BDLFVBQU0sZUFBZSxPQUFPLGFBQWE7QUFHekMsUUFBSSxhQUFhLFNBQVMsR0FBRztBQUMzQixZQUFNLGNBQWMsS0FBSyxXQUFXLFlBQVk7QUFDaEQsYUFBTyxpQkFBaUIsV0FBVztBQUNuQyxjQUFRLElBQUksNkJBQTZCLGFBQWE7QUFBQSxJQUN4RCxPQUFPO0FBQ0wsY0FBUSxJQUFJLHFDQUFxQztBQUFBLElBQ25EO0FBQUEsRUFDRjtBQUFBO0FBQUEsRUFHQSxXQUFXLE1BQXNCO0FBQy9CLFVBQU0sZUFBMEM7QUFBQSxNQUM5QyxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsTUFDTCxLQUFLO0FBQUEsSUFDUDtBQUVBLFdBQU8sS0FBSyxRQUFRLFlBQVksQ0FBQyxTQUFTLGFBQWEsSUFBSSxLQUFLLElBQUk7QUFBQSxFQUN0RTtBQUFBLEVBRUEsV0FBVztBQUNULFlBQVEsSUFBSSx3Q0FBd0M7QUFBQSxFQUN0RDtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
